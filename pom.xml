<project xmlns="http://maven.apache.org/POM/4.0.0"
			xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
			http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.wolf359apps.ecommerce</groupId>
	<artifactId>ecommerce-parent</artifactId>
	<version>1.0.0</version>
	<packaging>pom</packaging>

	<properties>
		<java.version>21</java.version>
		<spring-boot.version>3.4.4</spring-boot.version>
		<spring-cloud.version>2024.0.1</spring-cloud.version>
		<maven-compiler-plugin.version>3.14.0</maven-compiler-plugin.version>
		<jib-maven-plugin.version>3.4.5</jib-maven-plugin.version>
	</properties>

	<dependencyManagement>

		<dependencies>

			<!-- Spring Boot BOM -->
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>${spring-boot.version}</version>
				<scope>import</scope>
				<type>pom</type>
			</dependency>

			<!-- Spring Cloud BOM -->
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<scope>import</scope>
				<type>pom</type>
			</dependency>

		</dependencies>

	</dependencyManagement>

	<dependencies>

		<!-- Spring Boot Starter Test -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- JUnit Juniper -->
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter</artifactId>
			<scope>test</scope>
		</dependency>

	</dependencies>

	<build>
		<plugins>

			<!-- SPRING BOOT MAVEN -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<version>${spring-boot.version}</version>
			</plugin>

			<!-- MAVEN COMPILER -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven-compiler-plugin.version}</version>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
				</configuration>
			</plugin>

			<!-- JIB MAVEN -->
			<plugin>
				<groupId>com.google.cloud.tools</groupId>
				<artifactId>jib-maven-plugin</artifactId>
				<version>${jib-maven-plugin.version}</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>build</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<to>
						<!--
							host.docker.internal is a special DNS hostname provided by Docker.
							It maps to the host machine's IP address, allowing containers to communicate with services running on the host.
							
							By starting the container with --add-host=host.docker.internal:host-gateway we add host.docker.internal to the container's /etc/hosts file.
							This maps host.docker.internal to the host machine's IP address (host-gateway).
							
							This ensures that Jib, running inside the Jenkins container, can resolve host.docker.internal as the host's IP and push the created image to the local Docker registry using HTTP.
							
							Alternatives:
							1) When both containers run inside the same Docker environment, we could simply use registry container's service name:
							   <image>registry:5000/...</image>
							2) An /etc/hosts entry, pointing to the host's IP, which will be used by Minikube, could also be used here:
							   <image>local-registry:5000/...</image>
						-->
						<image>host.docker.internal:5000/${project.artifactId}:latest</image>
					</to>
					<!-- Enables JIB to push images to registries that use HTTP instead of HTTPS -->
					<allowInsecureRegistries>true</allowInsecureRegistries>
				</configuration>
			</plugin>

		</plugins>

	</build>

</project>